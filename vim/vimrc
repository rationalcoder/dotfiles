execute pathogen#infect()

syntax on
filetype plugin on

set background=dark
set noerrorbells visualbell t_vb=
set backspace=indent,eol,start
set smartindent
set t_Co=256
set tabstop=4
set shiftwidth=4
set expandtab
"set number
set ci
set wrap
set linebreak
set nocp

nnoremap <leader>ev :vsplit ~/.vimrc<cr>
nnoremap <leader>env :vsplit $MYVIMRC<cr>
nnoremap <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

set ignorecase

set termguicolors
" NOTE: not sure why but leave color at the end or it may not work right.
"color Tomorrow-Night
color handmade-hero
"color hybrid 
"color lilypink 
if !has('nvim')
    set guifont=DejaVu\ Sans\ Mono:h11
endif

au GUIEnter * simalt ~x
au GUIEnter * set visualbell t_vb=

" Magic 256 color setting for PuTTY:
if &term =~ "xterm"
    " 256 colors
    let &t_Co = 256
    " restore screen after quitting
    let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l\<Esc>8"
    if has("terminfo")
        let &t_Sf = "\<Esc>[3%p1%dm"
        let &t_Sb = "\<Esc>[4%p1%dm"
    else
        let &t_Sf = "\<Esc>[3%dm"
        let &t_Sb = "\<Esc>[4%dm"
    endif
endif

function MoveCursorToWhereItWas()
    if line("'\"") > 0 && line("'\"") <= line("$")
        exe "normal! g`\""
        exe "normal! zz"
    endif
endfunction

if has("autocmd")
    au BufReadPost * call MoveCursorToWhereItWas()
endif

autocmd FileType html setlocal sw=2 ts=2
autocmd FileType css setlocal sw=2 ts=2
autocmd FileType Makefile setlocal noet

cnoreabbrev W w
cnoreabbrev Noh noh

" AsyncRun
let g:asyncrun_open = 15
let g:asyncrun_auto = "make"
" F10 to toggle quickfix window
nnoremap <F10> :call asyncrun#quickfix_toggle(g:asyncrun_open)<cr>
nnoremap <F5> :w<cr>:AsyncRun! build<cr>
nnoremap <F7> :w<cr>:cclose<cr>:AsyncStop!<cr>:sleep<cr>:AsyncRun! -slient run<cr>:cclose<cr>
nnoremap <c-j> :cnext<cr>
nnoremap <c-k> :cprev<cr>
"

"GutenTags
let g:gutentags_ctags_exclude = ["build*/*"] 
nnoremap <F2> <c-]>
"

" errormarker
let g:errormarker_errortext = "E"
let g:errormarker_warningtext = "W"
let g:errormarker_errortextgroup = "ErrorMsg"
let g:errormarker_warningtextgroup = "cImportant"
let g:errormarker_errorgroup = "non_existent_group"
let g:errormarker_warninggroup = "non_existent_group"
" These are for gcc, but they cause "error" to be highlighted in the qfx
" window, which is annoying.
"let &errorformat="%f:%l:%c: %t%*[^:]:%m," . &errorformat
"let &errorformat="%f:%l: %t%*[^:]:%m," . &errorformat

let &errorformat="%f(%l): %t%*[^:]: %m," . &errorformat
let errormarker_warningtypes = "wWiI"
"

